// server.js
const express = require('express');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const pool = require('./db');
const cors = require('cors');
const path = require("path");

const app = express();

// Middleware to parse JSON requests
app.use(bodyParser.json());
app.use(cors());

// Multer setup to store uploaded files in the "uploads" folder
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
      cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
      const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1E9);
      cb(null, uniqueSuffix + "-" + file.originalname);
  },
});

const upload = multer({ storage: storage });

// Serve static files (uploaded images) from "uploads" directory
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// API route to upload image and save metadata to PostgreSQL
app.post("/upload", upload.single("image"), async (req, res) => {
  if (!req.file) {
      return res.status(400).send("No file uploaded.");
  }

  // File metadata
  const { filename, originalname, mimetype, size } = req.file;
  const {email,category,descr,cost,acount,scount}=req.body;
  const imageUrl = `/uploads/${filename}`;

  try {
      // Insert image metadata into PostgreSQL
      const query = `
          INSERT INTO images (filename, imageUrl, originalName, mimetype, size,email,category,descr,cost,acount,scount)
          VALUES ($1, $2, $3, $4, $5,$6,$7,$8,$9,$10,$11) RETURNING *`;
      const values = [filename, imageUrl, originalname, mimetype, size,email,category,descr,cost,acount,scount];

      const result = await pool.query(query, values);
      res.json({ result});
  } catch (err) {
      console.error("Error saving image metadata to PostgreSQL:", err);
      res.status(500).send("Error saving image metadata.");
  }
});

// API route to get all images
app.get("/images", async (req, res) => {
  try {
      const query = "SELECT * FROM images";
      const result = await pool.query(query);
      res.json(result.rows);
  } catch (err) {
      console.error("Error retrieving images:", err);
      res.status(500).send("Error retrieving images.");
  }
});

app.post('/sign', async (req, res) => {
  const { firstName, lastName, email, password, phno } = req.body;

  try {
    // Check if user already exists
    const userExist = await pool.query('SELECT * FROM customer WHERE email = $1', [email]);
    if (userExist.rows.length > 0) {
      return res.status(400).json({ msg: 'User already exists' });
    }
    const newUser = await pool.query(
      'INSERT INTO customer (first_name, last_name, email, password, phone) VALUES ($1, $2, $3, $4, $5) RETURNING *',
      [firstName, lastName, email, password, phno]
    );

    return res.status(201).json(newUser.rows[0]);
  } catch (err) {
    console.error(err.message);
    return res.status(500).send('Server error');
  }
});

// Login route
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    // Check if user exists
    const user = await pool.query('SELECT * FROM customer WHERE email = $1', [email]);

    if (!user) {
      return res.status(404).json({success:false, message: "User not found" });
    }

    // res.json(user); // Send back the user data as JSON
    return res.json({ user:user,success: true, message: "Fetch the data" });
  } catch (err) {
    res.status(500).json({ error: "Server error" });
    return res.json({success:false});
  }
});
app.get('/',async(req,res)=>{
  const user = await pool.query('SELECT * FROM customer ;');

    if (!user) {
      return res.status(404).json({success:false, message: "User not found" });
    }else{
      res.json(user);
    }

})
// 4. PUT request to update a customer's dob, gender, and image by ID
app.put('/update', async (req, res) => {
  const { dob, gender, country, state, city, pin_code, email } = req.body;
  console.log(email);

  if (!email) {
    return res.status(400).json({ message: 'Email is required' });
  }

  console.log('Query inputs:', { dob, gender, country, state, city, pin_code, email });

  try {
    const result = await pool.query(
      `UPDATE customer 
       SET dob = $1, gender = $2, country = $3, state = $4, city = $5, pin_code = $6, updated_at = NOW() 
       WHERE email = $7 
       RETURNING *`,
      [dob, gender, country, state, city, pin_code, email]
    );

    console.log('Query result:', result);

    if (result.rowCount > 0) {
      res.status(200).json({user:result.rows[0],message:'Success full addes the data',success:true});
    } else {
      res.status(404).json({success:false, message: 'Customer not found' });
    }
  } catch (error) {
    console.error('Database error:', error);
    res.status(500).json({ error: error.message });
  }
});


// Start the server
app.listen(5000, () => {
  console.log('Server is running on port 5000');
  console.log("Database connected");
});
